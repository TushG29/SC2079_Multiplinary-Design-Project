package com.mdp.group20.pagefragment;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import com.mdp.group20.MainActivity;
import com.mdp.group20.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.mdp.group20.bluetooth.BluetoothService;
import com.mdp.group20.map.Constants;
import com.mdp.group20.map.Map;
import com.mdp.group20.modal.Robot;

import java.nio.charset.Charset;

import androidx.lifecycle.ViewModelProviders;

public class DebugTabFragment extends Fragment {

    private static final String ARG_SECTION_NUMBER = "section_number";
    private static final String TAG = "DebugTabFragment";

    private PageViewModel pageViewModel;
    // Control Button
    ImageButton moveForwardBtn, turnTopRightImageBtn, moveBackImageBtn, turnTopLeftBtn, turnBottomLeftBtn, turnBottomRightBtn;


    // Declaration Variable
    // Shared Preferences
    SharedPreferences sharedPreferences;

    FloatingActionButton send;
    private static TextView messageReceivedTextView;
    private EditText typeBoxEditText;

    private ImageButton clearMsgBtn;

    public static DebugTabFragment newInstance(int index) {
        DebugTabFragment fragment = new DebugTabFragment();
        Bundle bundle = new Bundle();
        bundle.putInt(ARG_SECTION_NUMBER, index);
        fragment.setArguments(bundle);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        pageViewModel = ViewModelProviders.of(this).get(PageViewModel.class);
        int index = 1;
        if (getArguments() != null) {
            index = getArguments().getInt(ARG_SECTION_NUMBER);
        }
        pageViewModel.setIndex(index);

    }

    @Override
    public View onCreateView(
            @NonNull LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.activity_debug_tab, container, false);

        send = (FloatingActionButton) root.findViewById(R.id.messageButton);

        // Message Box
        messageReceivedTextView = (TextView) root.findViewById(R.id.messageReceivedTextView);
        messageReceivedTextView.setMovementMethod(new ScrollingMovementMethod());
        typeBoxEditText = (EditText) root.findViewById(R.id.typeBoxEditText);
        clearMsgBtn = root.findViewById(R.id.clearMsgButton);

        // get shared preferences
        sharedPreferences = getActivity().getSharedPreferences("Shared Preferences", Context.MODE_PRIVATE);

        send.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showLog("Clicked sendTextBtn");
                String sentText = "" + typeBoxEditText.getText().toString();

                SharedPreferences.Editor editor = sharedPreferences.edit();
                editor.putString("message", sharedPreferences.getString("message", "") + '\n' + sentText);
                editor.commit();
                messageReceivedTextView.setText(sharedPreferences.getString("message", ""));
                typeBoxEditText.setText("");

                if (BluetoothService.BluetoothConnectionStatus == true) {
                    byte[] bytes = sentText.getBytes(Charset.defaultCharset());
                    BluetoothService.write(bytes);
                }
                showLog("Exiting sendTextBtn");
            }
        });

        clearMsgBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                SharedPreferences.Editor editor = sharedPreferences.edit();
                editor.remove("message");
                editor.commit();
                messageReceivedTextView.setText(sharedPreferences.getString("message", ""));
            }
        });

        moveForwardBtn = root.findViewById(R.id.upButton);
        turnTopRightImageBtn = root.findViewById(R.id.topRightButton);
        moveBackImageBtn = root.findViewById(R.id.downButton);
        turnTopLeftBtn = root.findViewById(R.id.topLeftButton);
        turnBottomLeftBtn = root.findViewById(R.id.bottomLeftButton);
        turnBottomRightBtn = root.findViewById(R.id.bottomRightButton);

        moveForwardBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                moveCarForward();
            }
        });

        turnTopRightImageBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                turnCarTopRight();
            }
        });

        moveBackImageBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                moveCarBackward();
            }
        });

        turnTopLeftBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                turnCarTopLeft();
            }
        });

        turnBottomLeftBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                turnCarBottomLeft();
            }
        });

        turnBottomRightBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                turnCarBottomRight();
            }
        });

        return root;
    }

    private void moveCarForward() {
        Robot robot = MainActivity.myRobot;
        if (MainActivity.getInstance().myRobot != null) {
            String direction = robot.getDirection();
            int row = robot.getRow();
            int col = robot.getCol();
            switch (direction) {
                case Constants.NORTH:
                    row++;
                    break;
                case Constants.SOUTH:
                    row--;
                    break;
                case Constants.WEST:
                    col--;
                    break;
                case Constants.EAST:
                    col++;
                    break;
            }

            MainActivity.getInstance().updateCarLocation(row, col, robot.getDirection(), false);

            if (row <= 0 || row > Constants.GRID_SIZE - 2 || col <= 0 || col > Constants.GRID_SIZE - 2 || Map.isCellOccupiedByObstacle(col, row)) {
                Toast.makeText(getContext(), "The robot cannot be moved to here", Toast.LENGTH_SHORT).show();
                return;
            }
            MainActivity.sendBTMessage("movement f");
        } else {
            Toast.makeText(getContext(), "Robot not found in map!", Toast.LENGTH_SHORT).show();
        }
    }

    private void moveCarBackward() {
        Robot robot = MainActivity.myRobot;
        if (MainActivity.getInstance().myRobot != null) {
            String direction = robot.getDirection();
            int row = robot.getRow();
            int col = robot.getCol();
            switch (direction) {
                case Constants.NORTH:
                    row--;
                    break;
                case Constants.SOUTH:
                    row++;
                    break;
                case Constants.WEST:
                    col++;
                    break;
                case Constants.EAST:
                    col--;
                    break;
            }
            MainActivity.getInstance().updateCarLocation(row, col, robot.getDirection(), false);

            if (row <= 0 || row > Constants.GRID_SIZE - 2 || col <= 0 || col > Constants.GRID_SIZE - 2 || Map.isCellOccupiedByObstacle(col, row)) {
                Toast.makeText(getContext(), "The robot cannot be moved to here", Toast.LENGTH_SHORT).show();
                return;
            }
            MainActivity.sendBTMessage("movement b");
        } else {
            Toast.makeText(getContext(), "Robot not found in map!", Toast.LENGTH_SHORT).show();
        }
    }

    private void turnCarTopRight() {
        Robot robot = MainActivity.myRobot;
        if (MainActivity.getInstance().myRobot != null) {
            String direction = robot.getDirection();
            int row = robot.getRow();
            int col = robot.getCol();
            switch (direction) {
                case Constants.NORTH:
                    col = col + 4;
                    row = row + 2;
//                    col = col + 3;
//                    row++;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.EAST, false);
                    break;
                case Constants.SOUTH:
                    col = col - 4;
                    row = row - 2;
//                    col = col - 3;
//                    row--;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.WEST, false);
                    break;
                case Constants.WEST:
                    col = col - 2;
                    row = row + 4;
//                    col--;
//                    row = row + 3;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.NORTH, false);
                    break;
                case Constants.EAST:
                    col = col + 2;
                    row = row - 4;
//                    col++;
//                    row = row - 3;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.SOUTH, false);
                    break;
            }
            if (row <= 0 || row > Constants.GRID_SIZE - 2 || col <= 0 || col > Constants.GRID_SIZE - 2 || Map.isCellOccupiedByObstacle(col, row)) {
                Toast.makeText(getContext(), "The robot cannot be moved to here", Toast.LENGTH_SHORT).show();
                return;
            }
            MainActivity.sendBTMessage("movement r");
        } else {
            Toast.makeText(getContext(), "Robot not found in map!", Toast.LENGTH_SHORT).show();
        }
    }

    private void turnCarTopLeft() {
        Robot robot = MainActivity.myRobot;
        if (MainActivity.getInstance().myRobot != null) {
            String direction = robot.getDirection();
            int row = robot.getRow();
            int col = robot.getCol();
            switch (direction) {
                case Constants.NORTH:
                    col = col - 4;
                    row = row + 2;
//                    col = col - 3;
//                    row++;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.WEST, false);
                    break;
                case Constants.SOUTH:
                    col = col + 4;
                    row = row - 2;
//                    col = col + 3;
//                    row--;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.EAST, false);
                    break;
                case Constants.WEST:
                    col = col - 2;
                    row = row - 4;
//                    col--;
//                    row = row - 3;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.SOUTH, false);
                    break;
                case Constants.EAST:
//                    col++;
//                    row = row + 3;
                    col = col + 2;
                    row = row + 4;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.NORTH, false);
                    break;
            }
            if (row <= 0 || row > Constants.GRID_SIZE - 2 || col <= 0 || col > Constants.GRID_SIZE - 2 || Map.isCellOccupiedByObstacle(col, row)) {
                Toast.makeText(getContext(), "The robot cannot be moved to here", Toast.LENGTH_SHORT).show();
                return;
            }
            MainActivity.sendBTMessage("movement l");
        } else {
            Toast.makeText(getContext(), "Robot not found in map!", Toast.LENGTH_SHORT).show();
        }
    }

    private void turnCarBottomRight() {
        Robot robot = MainActivity.myRobot;
        if (MainActivity.getInstance().myRobot != null) {
            String direction = robot.getDirection();
            int row = robot.getRow();
            int col = robot.getCol();
            switch (direction) {
                case Constants.NORTH:
                    col = col + 2;
                    row = row - 4;
//                    col++;
//                    row = row - 3;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.WEST, false);
                    break;
                case Constants.SOUTH:
                    col = col - 2;
                    row = row + 4;
//                    col--;
//                    row = row + 3;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.EAST, false);
                    break;
                case Constants.WEST:
                    col = col + 4;
                    row = row + 2;
//                    col = col + 3;
//                    row++;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.SOUTH, false);
                    break;
                case Constants.EAST:
                    col = col - 4;
                    row = row - 2;
//                    col = col - 3;
//                    row--;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.NORTH, false);
                    break;
            }
            if (row <= 0 || row > Constants.GRID_SIZE - 2 || col <= 0 || col > Constants.GRID_SIZE - 2 || Map.isCellOccupiedByObstacle(col, row)) {
                Toast.makeText(getContext(), "The robot cannot be moved to here", Toast.LENGTH_SHORT).show();
                return;
            }
            MainActivity.sendBTMessage("movement R");
        } else {
            Toast.makeText(getContext(), "Robot not found in map!", Toast.LENGTH_SHORT).show();
        }
    }

    private void turnCarBottomLeft() {
        Robot robot = MainActivity.myRobot;
        if (MainActivity.getInstance().myRobot != null) {
            String direction = robot.getDirection();
            int row = robot.getRow();
            int col = robot.getCol();
            switch (direction) {
                case Constants.NORTH:
                    col = col - 2;
                    row = row - 4;
//                    col--;
//                    row = row - 3;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.EAST, false);
                    break;
                case Constants.SOUTH:
                    col = col + 2;
                    row = row + 4;
//                    col++;
//                    row = row + 3;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.WEST, false);
                    break;
                case Constants.WEST:
                    col = col + 4;
                    row = row - 2;
//                    col = col + 3;
//                    row--;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.NORTH, false);
                    break;
                case Constants.EAST:
                    col = col - 4;
                    row = row + 2;
//                    col = col - 3;
//                    row++;
                    MainActivity.getInstance().updateCarLocation(row, col, Constants.SOUTH, false);
                    break;
            }
            if (row <= 0 || row > Constants.GRID_SIZE - 2 || col <= 0 || col > Constants.GRID_SIZE - 2 || Map.isCellOccupiedByObstacle(col, row)) {
                Toast.makeText(getContext(), "The robot cannot be moved to here", Toast.LENGTH_SHORT).show();
                return;
            }
            MainActivity.sendBTMessage("L");
        } else {
            Toast.makeText(getContext(), "Robot not found in map!", Toast.LENGTH_SHORT).show();
        }
    }

    private static void showLog(String message) {
        Log.d(TAG, message);
    }

    public static TextView getMessageReceivedTextView() {
        return messageReceivedTextView;
    }
}